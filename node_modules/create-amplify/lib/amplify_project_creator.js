import { logger } from './logger.js';
const LEARN_MORE_USAGE_DATA_TRACKING_LINK = `https://docs.amplify.aws/gen2/reference/telemetry`;
/**
 *
 */
export class AmplifyProjectCreator {
    packageManagerController;
    projectRootValidator;
    initialProjectFileGenerator;
    npmInitializedEnsurer;
    gitIgnoreInitializer;
    projectRoot;
    defaultDevPackages = [
        '@aws-amplify/backend',
        '@aws-amplify/backend-cli',
        'aws-cdk@^2',
        'aws-cdk-lib@^2',
        'constructs@^10.0.0',
        'typescript@^5.0.0',
    ];
    defaultProdPackages = ['aws-amplify'];
    /**
     * Orchestrator for the create-amplify workflow.
     * Delegates out to other classes that handle parts of the getting started experience
     */
    constructor(packageManagerController, projectRootValidator, initialProjectFileGenerator, npmInitializedEnsurer, gitIgnoreInitializer, projectRoot) {
        this.packageManagerController = packageManagerController;
        this.projectRootValidator = projectRootValidator;
        this.initialProjectFileGenerator = initialProjectFileGenerator;
        this.npmInitializedEnsurer = npmInitializedEnsurer;
        this.gitIgnoreInitializer = gitIgnoreInitializer;
        this.projectRoot = projectRoot;
    }
    /**
     * Executes the create-amplify workflow
     */
    create = async () => {
        logger.debug(`Validating current state of target directory...`);
        await this.projectRootValidator.validate();
        await this.npmInitializedEnsurer.ensureInitialized();
        await logger.indicateProgress(`Installing required dependencies`, async () => {
            await this.packageManagerController.installDependencies(this.defaultProdPackages, 'prod');
            await this.packageManagerController.installDependencies(this.defaultDevPackages, 'dev');
        });
        await logger.indicateProgress(`Creating template files`, async () => {
            await this.gitIgnoreInitializer.ensureInitialized();
            await this.initialProjectFileGenerator.generateInitialProjectFiles();
        });
        logger.log('Successfully created a new project!');
        const cdCommand = process.cwd() === this.projectRoot
            ? ''
            : `cd .${this.projectRoot.replace(process.cwd(), '')}; `;
        logger.log(`Welcome to AWS Amplify! 
Run \`npx amplify help\` for a list of available commands. 
Get started by running \`${cdCommand}npx amplify sandbox\`.`);
        logger.log(`Amplify (Gen 2) collects anonymous telemetry data about general usage of the CLI.

Participation is optional, and you may opt-out by using \`amplify configure telemetry disable\`.

To learn more about telemetry, visit ${LEARN_MORE_USAGE_DATA_TRACKING_LINK}`);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW1wbGlmeV9wcm9qZWN0X2NyZWF0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvYW1wbGlmeV9wcm9qZWN0X2NyZWF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBS0EsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUVyQyxNQUFNLG1DQUFtQyxHQUFHLG1EQUFtRCxDQUFDO0FBRWhHOztHQUVHO0FBQ0gsTUFBTSxPQUFPLHFCQUFxQjtJQWlCYjtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFyQkYsa0JBQWtCLEdBQUc7UUFDcEMsc0JBQXNCO1FBQ3RCLDBCQUEwQjtRQUMxQixZQUFZO1FBQ1osZ0JBQWdCO1FBQ2hCLG9CQUFvQjtRQUNwQixtQkFBbUI7S0FDcEIsQ0FBQztJQUVlLG1CQUFtQixHQUFHLENBQUMsYUFBYSxDQUFDLENBQUM7SUFFdkQ7OztPQUdHO0lBQ0gsWUFDbUIsd0JBQWtELEVBQ2xELG9CQUEwQyxFQUMxQywyQkFBd0QsRUFDeEQscUJBQTRDLEVBQzVDLG9CQUEwQyxFQUMxQyxXQUFtQjtRQUxuQiw2QkFBd0IsR0FBeEIsd0JBQXdCLENBQTBCO1FBQ2xELHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBc0I7UUFDMUMsZ0NBQTJCLEdBQTNCLDJCQUEyQixDQUE2QjtRQUN4RCwwQkFBcUIsR0FBckIscUJBQXFCLENBQXVCO1FBQzVDLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBc0I7UUFDMUMsZ0JBQVcsR0FBWCxXQUFXLENBQVE7SUFDbkMsQ0FBQztJQUVKOztPQUVHO0lBQ0gsTUFBTSxHQUFHLEtBQUssSUFBbUIsRUFBRTtRQUNqQyxNQUFNLENBQUMsS0FBSyxDQUFDLGlEQUFpRCxDQUFDLENBQUM7UUFDaEUsTUFBTSxJQUFJLENBQUMsb0JBQW9CLENBQUMsUUFBUSxFQUFFLENBQUM7UUFFM0MsTUFBTSxJQUFJLENBQUMscUJBQXFCLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUVyRCxNQUFNLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FDM0Isa0NBQWtDLEVBQ2xDLEtBQUssSUFBSSxFQUFFO1lBQ1QsTUFBTSxJQUFJLENBQUMsd0JBQXdCLENBQUMsbUJBQW1CLENBQ3JELElBQUksQ0FBQyxtQkFBbUIsRUFDeEIsTUFBTSxDQUNQLENBQUM7WUFFRixNQUFNLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxtQkFBbUIsQ0FDckQsSUFBSSxDQUFDLGtCQUFrQixFQUN2QixLQUFLLENBQ04sQ0FBQztRQUNKLENBQUMsQ0FDRixDQUFDO1FBRUYsTUFBTSxNQUFNLENBQUMsZ0JBQWdCLENBQUMseUJBQXlCLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDbEUsTUFBTSxJQUFJLENBQUMsb0JBQW9CLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztZQUVwRCxNQUFNLElBQUksQ0FBQywyQkFBMkIsQ0FBQywyQkFBMkIsRUFBRSxDQUFDO1FBQ3ZFLENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxDQUFDLEdBQUcsQ0FBQyxxQ0FBcUMsQ0FBQyxDQUFDO1FBRWxELE1BQU0sU0FBUyxHQUNiLE9BQU8sQ0FBQyxHQUFHLEVBQUUsS0FBSyxJQUFJLENBQUMsV0FBVztZQUNoQyxDQUFDLENBQUMsRUFBRTtZQUNKLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDO1FBRTdELE1BQU0sQ0FBQyxHQUFHLENBQ1I7OzJCQUVxQixTQUFTLHdCQUF3QixDQUN2RCxDQUFDO1FBRUYsTUFBTSxDQUFDLEdBQUcsQ0FDUjs7Ozt1Q0FJaUMsbUNBQW1DLEVBQUUsQ0FDdkUsQ0FBQztJQUNKLENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFja2FnZU1hbmFnZXJDb250cm9sbGVyIH0gZnJvbSAnLi9wYWNrYWdlX21hbmFnZXJfY29udHJvbGxlci5qcyc7XG5pbXBvcnQgeyBQcm9qZWN0Um9vdFZhbGlkYXRvciB9IGZyb20gJy4vcHJvamVjdF9yb290X3ZhbGlkYXRvci5qcyc7XG5pbXBvcnQgeyBJbml0aWFsUHJvamVjdEZpbGVHZW5lcmF0b3IgfSBmcm9tICcuL2luaXRpYWxfcHJvamVjdF9maWxlX2dlbmVyYXRvci5qcyc7XG5pbXBvcnQgeyBOcG1Qcm9qZWN0SW5pdGlhbGl6ZXIgfSBmcm9tICcuL25wbV9wcm9qZWN0X2luaXRpYWxpemVyLmpzJztcbmltcG9ydCB7IEdpdElnbm9yZUluaXRpYWxpemVyIH0gZnJvbSAnLi9naXRpZ25vcmVfaW5pdGlhbGl6ZXIuanMnO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnLi9sb2dnZXIuanMnO1xuXG5jb25zdCBMRUFSTl9NT1JFX1VTQUdFX0RBVEFfVFJBQ0tJTkdfTElOSyA9IGBodHRwczovL2RvY3MuYW1wbGlmeS5hd3MvZ2VuMi9yZWZlcmVuY2UvdGVsZW1ldHJ5YDtcblxuLyoqXG4gKlxuICovXG5leHBvcnQgY2xhc3MgQW1wbGlmeVByb2plY3RDcmVhdG9yIHtcbiAgcHJpdmF0ZSByZWFkb25seSBkZWZhdWx0RGV2UGFja2FnZXMgPSBbXG4gICAgJ0Bhd3MtYW1wbGlmeS9iYWNrZW5kJyxcbiAgICAnQGF3cy1hbXBsaWZ5L2JhY2tlbmQtY2xpJyxcbiAgICAnYXdzLWNka0BeMicsXG4gICAgJ2F3cy1jZGstbGliQF4yJyxcbiAgICAnY29uc3RydWN0c0BeMTAuMC4wJyxcbiAgICAndHlwZXNjcmlwdEBeNS4wLjAnLFxuICBdO1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgZGVmYXVsdFByb2RQYWNrYWdlcyA9IFsnYXdzLWFtcGxpZnknXTtcblxuICAvKipcbiAgICogT3JjaGVzdHJhdG9yIGZvciB0aGUgY3JlYXRlLWFtcGxpZnkgd29ya2Zsb3cuXG4gICAqIERlbGVnYXRlcyBvdXQgdG8gb3RoZXIgY2xhc3NlcyB0aGF0IGhhbmRsZSBwYXJ0cyBvZiB0aGUgZ2V0dGluZyBzdGFydGVkIGV4cGVyaWVuY2VcbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcGFja2FnZU1hbmFnZXJDb250cm9sbGVyOiBQYWNrYWdlTWFuYWdlckNvbnRyb2xsZXIsXG4gICAgcHJpdmF0ZSByZWFkb25seSBwcm9qZWN0Um9vdFZhbGlkYXRvcjogUHJvamVjdFJvb3RWYWxpZGF0b3IsXG4gICAgcHJpdmF0ZSByZWFkb25seSBpbml0aWFsUHJvamVjdEZpbGVHZW5lcmF0b3I6IEluaXRpYWxQcm9qZWN0RmlsZUdlbmVyYXRvcixcbiAgICBwcml2YXRlIHJlYWRvbmx5IG5wbUluaXRpYWxpemVkRW5zdXJlcjogTnBtUHJvamVjdEluaXRpYWxpemVyLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgZ2l0SWdub3JlSW5pdGlhbGl6ZXI6IEdpdElnbm9yZUluaXRpYWxpemVyLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcHJvamVjdFJvb3Q6IHN0cmluZ1xuICApIHt9XG5cbiAgLyoqXG4gICAqIEV4ZWN1dGVzIHRoZSBjcmVhdGUtYW1wbGlmeSB3b3JrZmxvd1xuICAgKi9cbiAgY3JlYXRlID0gYXN5bmMgKCk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgIGxvZ2dlci5kZWJ1ZyhgVmFsaWRhdGluZyBjdXJyZW50IHN0YXRlIG9mIHRhcmdldCBkaXJlY3RvcnkuLi5gKTtcbiAgICBhd2FpdCB0aGlzLnByb2plY3RSb290VmFsaWRhdG9yLnZhbGlkYXRlKCk7XG5cbiAgICBhd2FpdCB0aGlzLm5wbUluaXRpYWxpemVkRW5zdXJlci5lbnN1cmVJbml0aWFsaXplZCgpO1xuXG4gICAgYXdhaXQgbG9nZ2VyLmluZGljYXRlUHJvZ3Jlc3MoXG4gICAgICBgSW5zdGFsbGluZyByZXF1aXJlZCBkZXBlbmRlbmNpZXNgLFxuICAgICAgYXN5bmMgKCkgPT4ge1xuICAgICAgICBhd2FpdCB0aGlzLnBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlci5pbnN0YWxsRGVwZW5kZW5jaWVzKFxuICAgICAgICAgIHRoaXMuZGVmYXVsdFByb2RQYWNrYWdlcyxcbiAgICAgICAgICAncHJvZCdcbiAgICAgICAgKTtcblxuICAgICAgICBhd2FpdCB0aGlzLnBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlci5pbnN0YWxsRGVwZW5kZW5jaWVzKFxuICAgICAgICAgIHRoaXMuZGVmYXVsdERldlBhY2thZ2VzLFxuICAgICAgICAgICdkZXYnXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgKTtcblxuICAgIGF3YWl0IGxvZ2dlci5pbmRpY2F0ZVByb2dyZXNzKGBDcmVhdGluZyB0ZW1wbGF0ZSBmaWxlc2AsIGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IHRoaXMuZ2l0SWdub3JlSW5pdGlhbGl6ZXIuZW5zdXJlSW5pdGlhbGl6ZWQoKTtcblxuICAgICAgYXdhaXQgdGhpcy5pbml0aWFsUHJvamVjdEZpbGVHZW5lcmF0b3IuZ2VuZXJhdGVJbml0aWFsUHJvamVjdEZpbGVzKCk7XG4gICAgfSk7XG5cbiAgICBsb2dnZXIubG9nKCdTdWNjZXNzZnVsbHkgY3JlYXRlZCBhIG5ldyBwcm9qZWN0IScpO1xuXG4gICAgY29uc3QgY2RDb21tYW5kID1cbiAgICAgIHByb2Nlc3MuY3dkKCkgPT09IHRoaXMucHJvamVjdFJvb3RcbiAgICAgICAgPyAnJ1xuICAgICAgICA6IGBjZCAuJHt0aGlzLnByb2plY3RSb290LnJlcGxhY2UocHJvY2Vzcy5jd2QoKSwgJycpfTsgYDtcblxuICAgIGxvZ2dlci5sb2coXG4gICAgICBgV2VsY29tZSB0byBBV1MgQW1wbGlmeSEgXG5SdW4gXFxgbnB4IGFtcGxpZnkgaGVscFxcYCBmb3IgYSBsaXN0IG9mIGF2YWlsYWJsZSBjb21tYW5kcy4gXG5HZXQgc3RhcnRlZCBieSBydW5uaW5nIFxcYCR7Y2RDb21tYW5kfW5weCBhbXBsaWZ5IHNhbmRib3hcXGAuYFxuICAgICk7XG5cbiAgICBsb2dnZXIubG9nKFxuICAgICAgYEFtcGxpZnkgKEdlbiAyKSBjb2xsZWN0cyBhbm9ueW1vdXMgdGVsZW1ldHJ5IGRhdGEgYWJvdXQgZ2VuZXJhbCB1c2FnZSBvZiB0aGUgQ0xJLlxuXG5QYXJ0aWNpcGF0aW9uIGlzIG9wdGlvbmFsLCBhbmQgeW91IG1heSBvcHQtb3V0IGJ5IHVzaW5nIFxcYGFtcGxpZnkgY29uZmlndXJlIHRlbGVtZXRyeSBkaXNhYmxlXFxgLlxuXG5UbyBsZWFybiBtb3JlIGFib3V0IHRlbGVtZXRyeSwgdmlzaXQgJHtMRUFSTl9NT1JFX1VTQUdFX0RBVEFfVFJBQ0tJTkdfTElOS31gXG4gICAgKTtcbiAgfTtcbn1cbiJdfQ==