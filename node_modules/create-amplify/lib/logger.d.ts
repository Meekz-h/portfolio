/// <reference types="node" resolution-mode="require"/>
/**
 * A logger that logs messages to the console.
 */
export declare class Logger {
    private readonly minimumLogLevel;
    private readonly stdout;
    private timer;
    private refreshRate;
    private timerSet;
    /**
     * Creates a new Logger instance. Injecting stdout for testing.
     * @param minimumLogLevel The minimum log level to log.
     * @param stdout The stream to write logs to. Injected for testing.
     */
    constructor(minimumLogLevel?: LogLevel, stdout?: NodeJS.WriteStream & {
        fd: 1;
    });
    /**
     * Logs a message to the console.
     */
    log(message: string, level?: LogLevel): void;
    /**
     * Logs a message with animated ellipsis
     */
    indicateProgress(message: string, callback: () => Promise<void>): Promise<void>;
    /**
     * Writes escape sequence to stdout
     */
    writeEscapeSequence(action: EscapeSequence): void;
    /**
     * Checks if the environment is TTY
     */
    isTTY(): boolean;
    /**
     * Logs an error to the console.
     */
    error(message: string): void;
    /**
     * Logs a warning to the console.
     */
    warn(message: string): void;
    /**
     * Logs an info message to the console.
     */
    info(message: string): void;
    /**
     * Logs a debug message to the console.
     */
    debug(message: string): void;
    /**
     * Start animating ellipsis at the end of a log message.
     */
    private startAnimatingEllipsis;
    /**
     * Stops animating ellipsis and replace with a log message.
     */
    private stopAnimatingEllipsis;
}
declare enum EscapeSequence {
    CLEAR_LINE = "\u001B[2K",
    MOVE_CURSOR_TO_START = "\u001B[0G",
    SHOW_CURSOR = "\u001B[?25h",
    HIDE_CURSOR = "\u001B[?25l"
}
export declare enum LogLevel {
    ERROR = 0,
    WARNING = 1,
    INFO = 2,
    DEBUG = 3
}
export declare const argv: {
    [x: string]: unknown;
    debug: boolean;
    _: (string | number)[];
    $0: string;
} | {
    [x: string]: unknown;
    debug: boolean;
    _: (string | number)[];
    $0: string;
};
declare const logger: Logger;
export { logger };
//# sourceMappingURL=logger.d.ts.map