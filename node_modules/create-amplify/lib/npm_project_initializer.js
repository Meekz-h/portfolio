import { existsSync as _existsSync } from 'fs';
import * as path from 'path';
import { execa as _execa } from 'execa';
import { logger } from './logger.js';
import { executeWithDebugLogger } from './execute_with_logger.js';
/**
 * Ensure that the current working directory is a valid JavaScript project
 */
export class NpmProjectInitializer {
    projectRoot;
    existsSync;
    execa;
    /**
     * injecting console and fs for testing
     */
    constructor(projectRoot, existsSync = _existsSync, execa = _execa) {
        this.projectRoot = projectRoot;
        this.existsSync = existsSync;
        this.execa = execa;
    }
    /**
     * If package.json already exists, this is a noop. Otherwise, `npm init` is executed to create a package.json file
     */
    ensureInitialized = async () => {
        if (this.packageJsonExists()) {
            // if package.json already exists, no need to do anything
            return;
        }
        logger.debug('No package.json file found in the current directory. Running `npm init`...');
        try {
            await executeWithDebugLogger(this.projectRoot, 'npm', ['init', '--yes'], this.execa);
        }
        catch {
            throw new Error('`npm init` did not exit successfully. Initialize a valid JavaScript package before continuing.');
        }
        if (!this.packageJsonExists()) {
            // this should only happen if the customer exits out of npm init before finishing
            throw new Error('package.json does not exist after running `npm init`. Initialize a valid JavaScript package before continuing.');
        }
    };
    /**
     * Check if a package.json file exists in projectRoot
     */
    packageJsonExists = () => {
        return this.existsSync(path.resolve(this.projectRoot, 'package.json'));
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnBtX3Byb2plY3RfaW5pdGlhbGl6ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvbnBtX3Byb2plY3RfaW5pdGlhbGl6ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsSUFBSSxXQUFXLEVBQUUsTUFBTSxJQUFJLENBQUM7QUFDL0MsT0FBTyxLQUFLLElBQUksTUFBTSxNQUFNLENBQUM7QUFDN0IsT0FBTyxFQUFFLEtBQUssSUFBSSxNQUFNLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFDeEMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNyQyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUVsRTs7R0FFRztBQUNILE1BQU0sT0FBTyxxQkFBcUI7SUFLYjtJQUNBO0lBQ0E7SUFObkI7O09BRUc7SUFDSCxZQUNtQixXQUFtQixFQUNuQixhQUFhLFdBQVcsRUFDeEIsUUFBUSxNQUFNO1FBRmQsZ0JBQVcsR0FBWCxXQUFXLENBQVE7UUFDbkIsZUFBVSxHQUFWLFVBQVUsQ0FBYztRQUN4QixVQUFLLEdBQUwsS0FBSyxDQUFTO0lBQzlCLENBQUM7SUFFSjs7T0FFRztJQUNILGlCQUFpQixHQUFHLEtBQUssSUFBbUIsRUFBRTtRQUM1QyxJQUFJLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxFQUFFO1lBQzVCLHlEQUF5RDtZQUN6RCxPQUFPO1NBQ1I7UUFDRCxNQUFNLENBQUMsS0FBSyxDQUNWLDRFQUE0RSxDQUM3RSxDQUFDO1FBRUYsSUFBSTtZQUNGLE1BQU0sc0JBQXNCLENBQzFCLElBQUksQ0FBQyxXQUFXLEVBQ2hCLEtBQUssRUFDTCxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsRUFDakIsSUFBSSxDQUFDLEtBQUssQ0FDWCxDQUFDO1NBQ0g7UUFBQyxNQUFNO1lBQ04sTUFBTSxJQUFJLEtBQUssQ0FDYixnR0FBZ0csQ0FDakcsQ0FBQztTQUNIO1FBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxFQUFFO1lBQzdCLGlGQUFpRjtZQUNqRixNQUFNLElBQUksS0FBSyxDQUNiLGdIQUFnSCxDQUNqSCxDQUFDO1NBQ0g7SUFDSCxDQUFDLENBQUM7SUFFRjs7T0FFRztJQUNLLGlCQUFpQixHQUFHLEdBQVksRUFBRTtRQUN4QyxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLGNBQWMsQ0FBQyxDQUFDLENBQUM7SUFDekUsQ0FBQyxDQUFDO0NBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBleGlzdHNTeW5jIGFzIF9leGlzdHNTeW5jIH0gZnJvbSAnZnMnO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IGV4ZWNhIGFzIF9leGVjYSB9IGZyb20gJ2V4ZWNhJztcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJy4vbG9nZ2VyLmpzJztcbmltcG9ydCB7IGV4ZWN1dGVXaXRoRGVidWdMb2dnZXIgfSBmcm9tICcuL2V4ZWN1dGVfd2l0aF9sb2dnZXIuanMnO1xuXG4vKipcbiAqIEVuc3VyZSB0aGF0IHRoZSBjdXJyZW50IHdvcmtpbmcgZGlyZWN0b3J5IGlzIGEgdmFsaWQgSmF2YVNjcmlwdCBwcm9qZWN0XG4gKi9cbmV4cG9ydCBjbGFzcyBOcG1Qcm9qZWN0SW5pdGlhbGl6ZXIge1xuICAvKipcbiAgICogaW5qZWN0aW5nIGNvbnNvbGUgYW5kIGZzIGZvciB0ZXN0aW5nXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IHByb2plY3RSb290OiBzdHJpbmcsXG4gICAgcHJpdmF0ZSByZWFkb25seSBleGlzdHNTeW5jID0gX2V4aXN0c1N5bmMsXG4gICAgcHJpdmF0ZSByZWFkb25seSBleGVjYSA9IF9leGVjYVxuICApIHt9XG5cbiAgLyoqXG4gICAqIElmIHBhY2thZ2UuanNvbiBhbHJlYWR5IGV4aXN0cywgdGhpcyBpcyBhIG5vb3AuIE90aGVyd2lzZSwgYG5wbSBpbml0YCBpcyBleGVjdXRlZCB0byBjcmVhdGUgYSBwYWNrYWdlLmpzb24gZmlsZVxuICAgKi9cbiAgZW5zdXJlSW5pdGlhbGl6ZWQgPSBhc3luYyAoKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgaWYgKHRoaXMucGFja2FnZUpzb25FeGlzdHMoKSkge1xuICAgICAgLy8gaWYgcGFja2FnZS5qc29uIGFscmVhZHkgZXhpc3RzLCBubyBuZWVkIHRvIGRvIGFueXRoaW5nXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxvZ2dlci5kZWJ1ZyhcbiAgICAgICdObyBwYWNrYWdlLmpzb24gZmlsZSBmb3VuZCBpbiB0aGUgY3VycmVudCBkaXJlY3RvcnkuIFJ1bm5pbmcgYG5wbSBpbml0YC4uLidcbiAgICApO1xuXG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGV4ZWN1dGVXaXRoRGVidWdMb2dnZXIoXG4gICAgICAgIHRoaXMucHJvamVjdFJvb3QsXG4gICAgICAgICducG0nLFxuICAgICAgICBbJ2luaXQnLCAnLS15ZXMnXSxcbiAgICAgICAgdGhpcy5leGVjYVxuICAgICAgKTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ2BucG0gaW5pdGAgZGlkIG5vdCBleGl0IHN1Y2Nlc3NmdWxseS4gSW5pdGlhbGl6ZSBhIHZhbGlkIEphdmFTY3JpcHQgcGFja2FnZSBiZWZvcmUgY29udGludWluZy4nXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5wYWNrYWdlSnNvbkV4aXN0cygpKSB7XG4gICAgICAvLyB0aGlzIHNob3VsZCBvbmx5IGhhcHBlbiBpZiB0aGUgY3VzdG9tZXIgZXhpdHMgb3V0IG9mIG5wbSBpbml0IGJlZm9yZSBmaW5pc2hpbmdcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ3BhY2thZ2UuanNvbiBkb2VzIG5vdCBleGlzdCBhZnRlciBydW5uaW5nIGBucG0gaW5pdGAuIEluaXRpYWxpemUgYSB2YWxpZCBKYXZhU2NyaXB0IHBhY2thZ2UgYmVmb3JlIGNvbnRpbnVpbmcuJ1xuICAgICAgKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgcGFja2FnZS5qc29uIGZpbGUgZXhpc3RzIGluIHByb2plY3RSb290XG4gICAqL1xuICBwcml2YXRlIHBhY2thZ2VKc29uRXhpc3RzID0gKCk6IGJvb2xlYW4gPT4ge1xuICAgIHJldHVybiB0aGlzLmV4aXN0c1N5bmMocGF0aC5yZXNvbHZlKHRoaXMucHJvamVjdFJvb3QsICdwYWNrYWdlLmpzb24nKSk7XG4gIH07XG59XG4iXX0=