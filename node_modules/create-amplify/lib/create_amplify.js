#!/usr/bin/env node
/*
  We should be very careful about how much logic we add to this package.
  If this grows beyond just copying template files, we probably should put that logic into @aws-amplify/cli and delegate to it here
  This is because packages that run as part of `npm create *` are cached in the global npx cache which is cumbersome to update / clean.
  If customers have a cached version of the create-amplify package, they might execute that cached version even after we publish features and fixes to the package on npm.
 */
import { NpmPackageManagerController } from './npm_package_manager_controller.js';
import { ProjectRootValidator } from './project_root_validator.js';
import { AmplifyProjectCreator } from './amplify_project_creator.js';
import { InitialProjectFileGenerator } from './initial_project_file_generator.js';
import { NpmProjectInitializer } from './npm_project_initializer.js';
import { getProjectRoot } from './get_project_root.js';
import { GitIgnoreInitializer } from './gitignore_initializer.js';
const projectRoot = await getProjectRoot();
const amplifyProjectCreator = new AmplifyProjectCreator(new NpmPackageManagerController(projectRoot), new ProjectRootValidator(projectRoot), new InitialProjectFileGenerator(projectRoot), new NpmProjectInitializer(projectRoot), new GitIgnoreInitializer(projectRoot), projectRoot);
try {
    await amplifyProjectCreator.create();
}
catch (err) {
    console.error(err instanceof Error ? err.message : err);
    process.exitCode = 1;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlX2FtcGxpZnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvY3JlYXRlX2FtcGxpZnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUVBOzs7OztHQUtHO0FBRUgsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDbEYsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDbkUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDckUsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDbEYsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDckUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRWxFLE1BQU0sV0FBVyxHQUFHLE1BQU0sY0FBYyxFQUFFLENBQUM7QUFFM0MsTUFBTSxxQkFBcUIsR0FBRyxJQUFJLHFCQUFxQixDQUNyRCxJQUFJLDJCQUEyQixDQUFDLFdBQVcsQ0FBQyxFQUM1QyxJQUFJLG9CQUFvQixDQUFDLFdBQVcsQ0FBQyxFQUNyQyxJQUFJLDJCQUEyQixDQUFDLFdBQVcsQ0FBQyxFQUM1QyxJQUFJLHFCQUFxQixDQUFDLFdBQVcsQ0FBQyxFQUN0QyxJQUFJLG9CQUFvQixDQUFDLFdBQVcsQ0FBQyxFQUNyQyxXQUFXLENBQ1osQ0FBQztBQUVGLElBQUk7SUFDRixNQUFNLHFCQUFxQixDQUFDLE1BQU0sRUFBRSxDQUFDO0NBQ3RDO0FBQUMsT0FBTyxHQUFHLEVBQUU7SUFDWixPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsWUFBWSxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3hELE9BQU8sQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDO0NBQ3RCIiwic291cmNlc0NvbnRlbnQiOlsiIyEvdXNyL2Jpbi9lbnYgbm9kZVxuXG4vKlxuICBXZSBzaG91bGQgYmUgdmVyeSBjYXJlZnVsIGFib3V0IGhvdyBtdWNoIGxvZ2ljIHdlIGFkZCB0byB0aGlzIHBhY2thZ2UuXG4gIElmIHRoaXMgZ3Jvd3MgYmV5b25kIGp1c3QgY29weWluZyB0ZW1wbGF0ZSBmaWxlcywgd2UgcHJvYmFibHkgc2hvdWxkIHB1dCB0aGF0IGxvZ2ljIGludG8gQGF3cy1hbXBsaWZ5L2NsaSBhbmQgZGVsZWdhdGUgdG8gaXQgaGVyZVxuICBUaGlzIGlzIGJlY2F1c2UgcGFja2FnZXMgdGhhdCBydW4gYXMgcGFydCBvZiBgbnBtIGNyZWF0ZSAqYCBhcmUgY2FjaGVkIGluIHRoZSBnbG9iYWwgbnB4IGNhY2hlIHdoaWNoIGlzIGN1bWJlcnNvbWUgdG8gdXBkYXRlIC8gY2xlYW4uXG4gIElmIGN1c3RvbWVycyBoYXZlIGEgY2FjaGVkIHZlcnNpb24gb2YgdGhlIGNyZWF0ZS1hbXBsaWZ5IHBhY2thZ2UsIHRoZXkgbWlnaHQgZXhlY3V0ZSB0aGF0IGNhY2hlZCB2ZXJzaW9uIGV2ZW4gYWZ0ZXIgd2UgcHVibGlzaCBmZWF0dXJlcyBhbmQgZml4ZXMgdG8gdGhlIHBhY2thZ2Ugb24gbnBtLlxuICovXG5cbmltcG9ydCB7IE5wbVBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlciB9IGZyb20gJy4vbnBtX3BhY2thZ2VfbWFuYWdlcl9jb250cm9sbGVyLmpzJztcbmltcG9ydCB7IFByb2plY3RSb290VmFsaWRhdG9yIH0gZnJvbSAnLi9wcm9qZWN0X3Jvb3RfdmFsaWRhdG9yLmpzJztcbmltcG9ydCB7IEFtcGxpZnlQcm9qZWN0Q3JlYXRvciB9IGZyb20gJy4vYW1wbGlmeV9wcm9qZWN0X2NyZWF0b3IuanMnO1xuaW1wb3J0IHsgSW5pdGlhbFByb2plY3RGaWxlR2VuZXJhdG9yIH0gZnJvbSAnLi9pbml0aWFsX3Byb2plY3RfZmlsZV9nZW5lcmF0b3IuanMnO1xuaW1wb3J0IHsgTnBtUHJvamVjdEluaXRpYWxpemVyIH0gZnJvbSAnLi9ucG1fcHJvamVjdF9pbml0aWFsaXplci5qcyc7XG5pbXBvcnQgeyBnZXRQcm9qZWN0Um9vdCB9IGZyb20gJy4vZ2V0X3Byb2plY3Rfcm9vdC5qcyc7XG5pbXBvcnQgeyBHaXRJZ25vcmVJbml0aWFsaXplciB9IGZyb20gJy4vZ2l0aWdub3JlX2luaXRpYWxpemVyLmpzJztcblxuY29uc3QgcHJvamVjdFJvb3QgPSBhd2FpdCBnZXRQcm9qZWN0Um9vdCgpO1xuXG5jb25zdCBhbXBsaWZ5UHJvamVjdENyZWF0b3IgPSBuZXcgQW1wbGlmeVByb2plY3RDcmVhdG9yKFxuICBuZXcgTnBtUGFja2FnZU1hbmFnZXJDb250cm9sbGVyKHByb2plY3RSb290KSxcbiAgbmV3IFByb2plY3RSb290VmFsaWRhdG9yKHByb2plY3RSb290KSxcbiAgbmV3IEluaXRpYWxQcm9qZWN0RmlsZUdlbmVyYXRvcihwcm9qZWN0Um9vdCksXG4gIG5ldyBOcG1Qcm9qZWN0SW5pdGlhbGl6ZXIocHJvamVjdFJvb3QpLFxuICBuZXcgR2l0SWdub3JlSW5pdGlhbGl6ZXIocHJvamVjdFJvb3QpLFxuICBwcm9qZWN0Um9vdFxuKTtcblxudHJ5IHtcbiAgYXdhaXQgYW1wbGlmeVByb2plY3RDcmVhdG9yLmNyZWF0ZSgpO1xufSBjYXRjaCAoZXJyKSB7XG4gIGNvbnNvbGUuZXJyb3IoZXJyIGluc3RhbmNlb2YgRXJyb3IgPyBlcnIubWVzc2FnZSA6IGVycik7XG4gIHByb2Nlc3MuZXhpdENvZGUgPSAxO1xufVxuIl19