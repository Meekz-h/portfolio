import { execa as _execa } from 'execa';
import { logger } from './logger.js';
/**
 * Abstracts the execution of a command and pipes outputs/errors to `logger.debug`
 */
export const executeWithDebugLogger = async (cwd, executable, args, execa = _execa) => {
    try {
        const childProcess = execa(executable, args, {
            stdin: 'inherit',
            cwd,
        });
        childProcess?.stdout?.on('data', (data) => logger.debug(data));
        childProcess?.stderr?.on('data', (data) => logger.debug(data));
        await childProcess;
    }
    catch {
        throw new Error(`\`${executable}${args ? ' ' + args.join(' ') : ''}\` did not exit successfully. Rerun with --debug for more information.`);
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhlY3V0ZV93aXRoX2xvZ2dlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9leGVjdXRlX3dpdGhfbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxLQUFLLElBQUksTUFBTSxFQUFFLE1BQU0sT0FBTyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFckM7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBRyxLQUFLLEVBQ3pDLEdBQVcsRUFDWCxVQUFrQixFQUNsQixJQUFlLEVBQ2YsS0FBSyxHQUFHLE1BQU0sRUFDZCxFQUFFO0lBQ0YsSUFBSTtRQUNGLE1BQU0sWUFBWSxHQUFHLEtBQUssQ0FBQyxVQUFVLEVBQUUsSUFBSSxFQUFFO1lBQzNDLEtBQUssRUFBRSxTQUFTO1lBQ2hCLEdBQUc7U0FDSixDQUFDLENBQUM7UUFFSCxZQUFZLEVBQUUsTUFBTSxFQUFFLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUMvRCxZQUFZLEVBQUUsTUFBTSxFQUFFLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUUvRCxNQUFNLFlBQVksQ0FBQztLQUNwQjtJQUFDLE1BQU07UUFDTixNQUFNLElBQUksS0FBSyxDQUNiLEtBQUssVUFBVSxHQUNiLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ2hDLHdFQUF3RSxDQUN6RSxDQUFDO0tBQ0g7QUFDSCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBleGVjYSBhcyBfZXhlY2EgfSBmcm9tICdleGVjYSc7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICcuL2xvZ2dlci5qcyc7XG5cbi8qKlxuICogQWJzdHJhY3RzIHRoZSBleGVjdXRpb24gb2YgYSBjb21tYW5kIGFuZCBwaXBlcyBvdXRwdXRzL2Vycm9ycyB0byBgbG9nZ2VyLmRlYnVnYFxuICovXG5leHBvcnQgY29uc3QgZXhlY3V0ZVdpdGhEZWJ1Z0xvZ2dlciA9IGFzeW5jIChcbiAgY3dkOiBzdHJpbmcsXG4gIGV4ZWN1dGFibGU6IHN0cmluZyxcbiAgYXJncz86IHN0cmluZ1tdLFxuICBleGVjYSA9IF9leGVjYVxuKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgY2hpbGRQcm9jZXNzID0gZXhlY2EoZXhlY3V0YWJsZSwgYXJncywge1xuICAgICAgc3RkaW46ICdpbmhlcml0JyxcbiAgICAgIGN3ZCxcbiAgICB9KTtcblxuICAgIGNoaWxkUHJvY2Vzcz8uc3Rkb3V0Py5vbignZGF0YScsIChkYXRhKSA9PiBsb2dnZXIuZGVidWcoZGF0YSkpO1xuICAgIGNoaWxkUHJvY2Vzcz8uc3RkZXJyPy5vbignZGF0YScsIChkYXRhKSA9PiBsb2dnZXIuZGVidWcoZGF0YSkpO1xuXG4gICAgYXdhaXQgY2hpbGRQcm9jZXNzO1xuICB9IGNhdGNoIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgXFxgJHtleGVjdXRhYmxlfSR7XG4gICAgICAgIGFyZ3MgPyAnICcgKyBhcmdzLmpvaW4oJyAnKSA6ICcnXG4gICAgICB9XFxgIGRpZCBub3QgZXhpdCBzdWNjZXNzZnVsbHkuIFJlcnVuIHdpdGggLS1kZWJ1ZyBmb3IgbW9yZSBpbmZvcm1hdGlvbi5gXG4gICAgKTtcbiAgfVxufTtcbiJdfQ==