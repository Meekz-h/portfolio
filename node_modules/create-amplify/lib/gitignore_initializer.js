import { existsSync as _existsSync } from 'fs';
import _fs from 'fs/promises';
import * as path from 'path';
import * as os from 'os';
import { logger } from './logger.js';
/**
 * Ensure that the .gitignore file exists with the correct contents in the current working directory
 */
export class GitIgnoreInitializer {
    projectRoot;
    existsSync;
    fs;
    gitIgnorePath;
    /**
     * Injecting console and fs for testing
     */
    constructor(projectRoot, existsSync = _existsSync, fs = _fs) {
        this.projectRoot = projectRoot;
        this.existsSync = existsSync;
        this.fs = fs;
        this.gitIgnorePath = path.resolve(this.projectRoot, '.gitignore');
    }
    /**
     * If .gitignore exists, append patterns to ignore. Otherwise, create .gitignore with patterns to ignore
     */
    ensureInitialized = async () => {
        const ignorePatterns = [
            '# amplify',
            'node_modules',
            '.amplify',
            'amplifyconfiguration*',
        ];
        const gitIgnoreContent = await this.getGitIgnoreContent();
        // If .gitignore exists, append ignorePatterns that do not exist in contents
        if (gitIgnoreContent && gitIgnoreContent.length > 0) {
            const filteredIgnorePatterns = ignorePatterns.filter((pattern) => !gitIgnoreContent.includes(pattern));
            // Add os.EOL if last line of .gitignore does not have EOL
            if (gitIgnoreContent.slice(-1)[0] !== '' &&
                filteredIgnorePatterns.length > 0) {
                filteredIgnorePatterns.unshift(os.EOL);
            }
            await this.addIgnorePatterns(filteredIgnorePatterns);
            return;
        }
        logger.debug('No .gitignore file found in the working directory. Creating .gitignore...');
        await this.addIgnorePatterns(ignorePatterns);
    };
    /**
     * Add ignore patterns to .gitignore contents
     */
    addIgnorePatterns = async (patterns) => {
        if (patterns.length === 0) {
            // all patterns are already in .gitignore, noop
            return;
        }
        // Add EOL to end of each pattern, ensure additional content begins and ends with EOL
        const content = (patterns[0] === os.EOL || !this.gitIgnoreExists() ? '' : os.EOL) +
            patterns.join(os.EOL) +
            os.EOL;
        await this.fs.appendFile(this.gitIgnorePath, content);
    };
    /**
     * If .gitignore does not exist, this is a noop. Otherwise, get contents as an array
     */
    getGitIgnoreContent = async () => {
        if (!this.gitIgnoreExists()) {
            return;
        }
        return (await this.fs.readFile(this.gitIgnorePath, 'utf-8'))
            .split(os.EOL)
            .map((s) => {
            let result = s.trim();
            // Removes leading/trailing /
            if (result.startsWith('/')) {
                result = result.slice(1);
            }
            if (result.endsWith('/')) {
                result = result.slice(0, -1);
            }
            return result;
        });
    };
    /**
     * Check if a .gitignore file exists in projectRoot
     */
    gitIgnoreExists = () => {
        return this.existsSync(this.gitIgnorePath);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2l0aWdub3JlX2luaXRpYWxpemVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2dpdGlnbm9yZV9pbml0aWFsaXplci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxJQUFJLFdBQVcsRUFBRSxNQUFNLElBQUksQ0FBQztBQUMvQyxPQUFPLEdBQUcsTUFBTSxhQUFhLENBQUM7QUFDOUIsT0FBTyxLQUFLLElBQUksTUFBTSxNQUFNLENBQUM7QUFDN0IsT0FBTyxLQUFLLEVBQUUsTUFBTSxJQUFJLENBQUM7QUFDekIsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUVyQzs7R0FFRztBQUNILE1BQU0sT0FBTyxvQkFBb0I7SUFNWjtJQUNBO0lBQ0E7SUFQRixhQUFhLENBQVM7SUFDdkM7O09BRUc7SUFDSCxZQUNtQixXQUFtQixFQUNuQixhQUFhLFdBQVcsRUFDeEIsS0FBSyxHQUFHO1FBRlIsZ0JBQVcsR0FBWCxXQUFXLENBQVE7UUFDbkIsZUFBVSxHQUFWLFVBQVUsQ0FBYztRQUN4QixPQUFFLEdBQUYsRUFBRSxDQUFNO1FBRXpCLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQ3BFLENBQUM7SUFFRDs7T0FFRztJQUNILGlCQUFpQixHQUFHLEtBQUssSUFBbUIsRUFBRTtRQUM1QyxNQUFNLGNBQWMsR0FBRztZQUNyQixXQUFXO1lBQ1gsY0FBYztZQUNkLFVBQVU7WUFDVix1QkFBdUI7U0FDeEIsQ0FBQztRQUNGLE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztRQUUxRCw0RUFBNEU7UUFDNUUsSUFBSSxnQkFBZ0IsSUFBSSxnQkFBZ0IsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ25ELE1BQU0sc0JBQXNCLEdBQUcsY0FBYyxDQUFDLE1BQU0sQ0FDbEQsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUNqRCxDQUFDO1lBRUYsMERBQTBEO1lBQzFELElBQ0UsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRTtnQkFDcEMsc0JBQXNCLENBQUMsTUFBTSxHQUFHLENBQUMsRUFDakM7Z0JBQ0Esc0JBQXNCLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUN4QztZQUVELE1BQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDLHNCQUFzQixDQUFDLENBQUM7WUFDckQsT0FBTztTQUNSO1FBRUQsTUFBTSxDQUFDLEtBQUssQ0FDViwyRUFBMkUsQ0FDNUUsQ0FBQztRQUVGLE1BQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQy9DLENBQUMsQ0FBQztJQUVGOztPQUVHO0lBQ0ssaUJBQWlCLEdBQUcsS0FBSyxFQUFFLFFBQWtCLEVBQWlCLEVBQUU7UUFDdEUsSUFBSSxRQUFRLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUN6QiwrQ0FBK0M7WUFDL0MsT0FBTztTQUNSO1FBRUQscUZBQXFGO1FBQ3JGLE1BQU0sT0FBTyxHQUNYLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQztZQUNqRSxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUM7WUFDckIsRUFBRSxDQUFDLEdBQUcsQ0FBQztRQUVULE1BQU0sSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN4RCxDQUFDLENBQUM7SUFFRjs7T0FFRztJQUNLLG1CQUFtQixHQUFHLEtBQUssSUFBbUMsRUFBRTtRQUN0RSxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxFQUFFO1lBQzNCLE9BQU87U0FDUjtRQUVELE9BQU8sQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsT0FBTyxDQUFDLENBQUM7YUFDekQsS0FBSyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUM7YUFDYixHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtZQUNULElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUV0Qiw2QkFBNkI7WUFDN0IsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUMxQixNQUFNLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUMxQjtZQUNELElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDeEIsTUFBTSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDOUI7WUFFRCxPQUFPLE1BQU0sQ0FBQztRQUNoQixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQztJQUVGOztPQUVHO0lBQ0ssZUFBZSxHQUFHLEdBQVksRUFBRTtRQUN0QyxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQzdDLENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXhpc3RzU3luYyBhcyBfZXhpc3RzU3luYyB9IGZyb20gJ2ZzJztcbmltcG9ydCBfZnMgZnJvbSAnZnMvcHJvbWlzZXMnO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCAqIGFzIG9zIGZyb20gJ29zJztcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJy4vbG9nZ2VyLmpzJztcblxuLyoqXG4gKiBFbnN1cmUgdGhhdCB0aGUgLmdpdGlnbm9yZSBmaWxlIGV4aXN0cyB3aXRoIHRoZSBjb3JyZWN0IGNvbnRlbnRzIGluIHRoZSBjdXJyZW50IHdvcmtpbmcgZGlyZWN0b3J5XG4gKi9cbmV4cG9ydCBjbGFzcyBHaXRJZ25vcmVJbml0aWFsaXplciB7XG4gIHByaXZhdGUgcmVhZG9ubHkgZ2l0SWdub3JlUGF0aDogc3RyaW5nO1xuICAvKipcbiAgICogSW5qZWN0aW5nIGNvbnNvbGUgYW5kIGZzIGZvciB0ZXN0aW5nXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IHByb2plY3RSb290OiBzdHJpbmcsXG4gICAgcHJpdmF0ZSByZWFkb25seSBleGlzdHNTeW5jID0gX2V4aXN0c1N5bmMsXG4gICAgcHJpdmF0ZSByZWFkb25seSBmcyA9IF9mc1xuICApIHtcbiAgICB0aGlzLmdpdElnbm9yZVBhdGggPSBwYXRoLnJlc29sdmUodGhpcy5wcm9qZWN0Um9vdCwgJy5naXRpZ25vcmUnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJZiAuZ2l0aWdub3JlIGV4aXN0cywgYXBwZW5kIHBhdHRlcm5zIHRvIGlnbm9yZS4gT3RoZXJ3aXNlLCBjcmVhdGUgLmdpdGlnbm9yZSB3aXRoIHBhdHRlcm5zIHRvIGlnbm9yZVxuICAgKi9cbiAgZW5zdXJlSW5pdGlhbGl6ZWQgPSBhc3luYyAoKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgY29uc3QgaWdub3JlUGF0dGVybnMgPSBbXG4gICAgICAnIyBhbXBsaWZ5JyxcbiAgICAgICdub2RlX21vZHVsZXMnLFxuICAgICAgJy5hbXBsaWZ5JyxcbiAgICAgICdhbXBsaWZ5Y29uZmlndXJhdGlvbionLFxuICAgIF07XG4gICAgY29uc3QgZ2l0SWdub3JlQ29udGVudCA9IGF3YWl0IHRoaXMuZ2V0R2l0SWdub3JlQ29udGVudCgpO1xuXG4gICAgLy8gSWYgLmdpdGlnbm9yZSBleGlzdHMsIGFwcGVuZCBpZ25vcmVQYXR0ZXJucyB0aGF0IGRvIG5vdCBleGlzdCBpbiBjb250ZW50c1xuICAgIGlmIChnaXRJZ25vcmVDb250ZW50ICYmIGdpdElnbm9yZUNvbnRlbnQubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgZmlsdGVyZWRJZ25vcmVQYXR0ZXJucyA9IGlnbm9yZVBhdHRlcm5zLmZpbHRlcihcbiAgICAgICAgKHBhdHRlcm4pID0+ICFnaXRJZ25vcmVDb250ZW50LmluY2x1ZGVzKHBhdHRlcm4pXG4gICAgICApO1xuXG4gICAgICAvLyBBZGQgb3MuRU9MIGlmIGxhc3QgbGluZSBvZiAuZ2l0aWdub3JlIGRvZXMgbm90IGhhdmUgRU9MXG4gICAgICBpZiAoXG4gICAgICAgIGdpdElnbm9yZUNvbnRlbnQuc2xpY2UoLTEpWzBdICE9PSAnJyAmJlxuICAgICAgICBmaWx0ZXJlZElnbm9yZVBhdHRlcm5zLmxlbmd0aCA+IDBcbiAgICAgICkge1xuICAgICAgICBmaWx0ZXJlZElnbm9yZVBhdHRlcm5zLnVuc2hpZnQob3MuRU9MKTtcbiAgICAgIH1cblxuICAgICAgYXdhaXQgdGhpcy5hZGRJZ25vcmVQYXR0ZXJucyhmaWx0ZXJlZElnbm9yZVBhdHRlcm5zKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsb2dnZXIuZGVidWcoXG4gICAgICAnTm8gLmdpdGlnbm9yZSBmaWxlIGZvdW5kIGluIHRoZSB3b3JraW5nIGRpcmVjdG9yeS4gQ3JlYXRpbmcgLmdpdGlnbm9yZS4uLidcbiAgICApO1xuXG4gICAgYXdhaXQgdGhpcy5hZGRJZ25vcmVQYXR0ZXJucyhpZ25vcmVQYXR0ZXJucyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEFkZCBpZ25vcmUgcGF0dGVybnMgdG8gLmdpdGlnbm9yZSBjb250ZW50c1xuICAgKi9cbiAgcHJpdmF0ZSBhZGRJZ25vcmVQYXR0ZXJucyA9IGFzeW5jIChwYXR0ZXJuczogc3RyaW5nW10pOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICBpZiAocGF0dGVybnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAvLyBhbGwgcGF0dGVybnMgYXJlIGFscmVhZHkgaW4gLmdpdGlnbm9yZSwgbm9vcFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIEFkZCBFT0wgdG8gZW5kIG9mIGVhY2ggcGF0dGVybiwgZW5zdXJlIGFkZGl0aW9uYWwgY29udGVudCBiZWdpbnMgYW5kIGVuZHMgd2l0aCBFT0xcbiAgICBjb25zdCBjb250ZW50ID1cbiAgICAgIChwYXR0ZXJuc1swXSA9PT0gb3MuRU9MIHx8ICF0aGlzLmdpdElnbm9yZUV4aXN0cygpID8gJycgOiBvcy5FT0wpICtcbiAgICAgIHBhdHRlcm5zLmpvaW4ob3MuRU9MKSArXG4gICAgICBvcy5FT0w7XG5cbiAgICBhd2FpdCB0aGlzLmZzLmFwcGVuZEZpbGUodGhpcy5naXRJZ25vcmVQYXRoLCBjb250ZW50KTtcbiAgfTtcblxuICAvKipcbiAgICogSWYgLmdpdGlnbm9yZSBkb2VzIG5vdCBleGlzdCwgdGhpcyBpcyBhIG5vb3AuIE90aGVyd2lzZSwgZ2V0IGNvbnRlbnRzIGFzIGFuIGFycmF5XG4gICAqL1xuICBwcml2YXRlIGdldEdpdElnbm9yZUNvbnRlbnQgPSBhc3luYyAoKTogUHJvbWlzZTxzdHJpbmdbXSB8IHVuZGVmaW5lZD4gPT4ge1xuICAgIGlmICghdGhpcy5naXRJZ25vcmVFeGlzdHMoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJldHVybiAoYXdhaXQgdGhpcy5mcy5yZWFkRmlsZSh0aGlzLmdpdElnbm9yZVBhdGgsICd1dGYtOCcpKVxuICAgICAgLnNwbGl0KG9zLkVPTClcbiAgICAgIC5tYXAoKHMpID0+IHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHMudHJpbSgpO1xuXG4gICAgICAgIC8vIFJlbW92ZXMgbGVhZGluZy90cmFpbGluZyAvXG4gICAgICAgIGlmIChyZXN1bHQuc3RhcnRzV2l0aCgnLycpKSB7XG4gICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnNsaWNlKDEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXN1bHQuZW5kc1dpdGgoJy8nKSkge1xuICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zbGljZSgwLCAtMSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgLmdpdGlnbm9yZSBmaWxlIGV4aXN0cyBpbiBwcm9qZWN0Um9vdFxuICAgKi9cbiAgcHJpdmF0ZSBnaXRJZ25vcmVFeGlzdHMgPSAoKTogYm9vbGVhbiA9PiB7XG4gICAgcmV0dXJuIHRoaXMuZXhpc3RzU3luYyh0aGlzLmdpdElnbm9yZVBhdGgpO1xuICB9O1xufVxuIl19