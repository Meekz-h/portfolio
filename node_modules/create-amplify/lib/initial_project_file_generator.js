import path from 'path';
import _fs from 'fs/promises';
import { executeWithDebugLogger as _executeWithDebugLogger } from './execute_with_logger.js';
import { execa } from 'execa';
/**
 *
 */
export class InitialProjectFileGenerator {
    projectRoot;
    fs;
    executeWithDebugLogger;
    /**
     * Responsible for copying getting started template to a new project directory
     * fs is injected for testing
     */
    constructor(projectRoot, fs = _fs, executeWithDebugLogger = _executeWithDebugLogger) {
        this.projectRoot = projectRoot;
        this.fs = fs;
        this.executeWithDebugLogger = executeWithDebugLogger;
    }
    /**
     * Copies the template directory to an amplify folder within the projectRoot
     */
    generateInitialProjectFiles = async () => {
        const targetDir = path.resolve(this.projectRoot, 'amplify');
        await this.fs.mkdir(targetDir, { recursive: true });
        await this.fs.cp(new URL('../templates/basic-auth-data/amplify', import.meta.url), targetDir, { recursive: true });
        const packageJsonContent = { type: 'module' };
        await this.fs.writeFile(path.resolve(targetDir, 'package.json'), JSON.stringify(packageJsonContent, null, 2));
        await this.initializeTsConfig(targetDir);
    };
    initializeTsConfig = async (targetDir) => {
        const tscArgs = [
            'tsc',
            '--init',
            '--resolveJsonModule',
            'true',
            '--module',
            'es2022',
            '--moduleResolution',
            'bundler',
            '--target',
            'es2022',
        ];
        await this.executeWithDebugLogger(targetDir, 'npx', tscArgs, execa);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdGlhbF9wcm9qZWN0X2ZpbGVfZ2VuZXJhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2luaXRpYWxfcHJvamVjdF9maWxlX2dlbmVyYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLElBQUksTUFBTSxNQUFNLENBQUM7QUFDeEIsT0FBTyxHQUFHLE1BQU0sYUFBYSxDQUFDO0FBQzlCLE9BQU8sRUFBRSxzQkFBc0IsSUFBSSx1QkFBdUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzdGLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFFOUI7O0dBRUc7QUFDSCxNQUFNLE9BQU8sMkJBQTJCO0lBTW5CO0lBQ0E7SUFDQTtJQVBuQjs7O09BR0c7SUFDSCxZQUNtQixXQUFtQixFQUNuQixLQUFLLEdBQUcsRUFDUix5QkFBeUIsdUJBQXVCO1FBRmhELGdCQUFXLEdBQVgsV0FBVyxDQUFRO1FBQ25CLE9BQUUsR0FBRixFQUFFLENBQU07UUFDUiwyQkFBc0IsR0FBdEIsc0JBQXNCLENBQTBCO0lBQ2hFLENBQUM7SUFFSjs7T0FFRztJQUNILDJCQUEyQixHQUFHLEtBQUssSUFBbUIsRUFBRTtRQUN0RCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDNUQsTUFBTSxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUNwRCxNQUFNLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUNkLElBQUksR0FBRyxDQUFDLHNDQUFzQyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQ2hFLFNBQVMsRUFDVCxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsQ0FDcEIsQ0FBQztRQUVGLE1BQU0sa0JBQWtCLEdBQUcsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLENBQUM7UUFDOUMsTUFBTSxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FDckIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsY0FBYyxDQUFDLEVBQ3ZDLElBQUksQ0FBQyxTQUFTLENBQUMsa0JBQWtCLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUM1QyxDQUFDO1FBRUYsTUFBTSxJQUFJLENBQUMsa0JBQWtCLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDM0MsQ0FBQyxDQUFDO0lBRU0sa0JBQWtCLEdBQUcsS0FBSyxFQUFFLFNBQWlCLEVBQWlCLEVBQUU7UUFDdEUsTUFBTSxPQUFPLEdBQUc7WUFDZCxLQUFLO1lBQ0wsUUFBUTtZQUNSLHFCQUFxQjtZQUNyQixNQUFNO1lBQ04sVUFBVTtZQUNWLFFBQVE7WUFDUixvQkFBb0I7WUFDcEIsU0FBUztZQUNULFVBQVU7WUFDVixRQUFRO1NBQ1QsQ0FBQztRQUVGLE1BQU0sSUFBSSxDQUFDLHNCQUFzQixDQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3RFLENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgX2ZzIGZyb20gJ2ZzL3Byb21pc2VzJztcbmltcG9ydCB7IGV4ZWN1dGVXaXRoRGVidWdMb2dnZXIgYXMgX2V4ZWN1dGVXaXRoRGVidWdMb2dnZXIgfSBmcm9tICcuL2V4ZWN1dGVfd2l0aF9sb2dnZXIuanMnO1xuaW1wb3J0IHsgZXhlY2EgfSBmcm9tICdleGVjYSc7XG5cbi8qKlxuICpcbiAqL1xuZXhwb3J0IGNsYXNzIEluaXRpYWxQcm9qZWN0RmlsZUdlbmVyYXRvciB7XG4gIC8qKlxuICAgKiBSZXNwb25zaWJsZSBmb3IgY29weWluZyBnZXR0aW5nIHN0YXJ0ZWQgdGVtcGxhdGUgdG8gYSBuZXcgcHJvamVjdCBkaXJlY3RvcnlcbiAgICogZnMgaXMgaW5qZWN0ZWQgZm9yIHRlc3RpbmdcbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcHJvamVjdFJvb3Q6IHN0cmluZyxcbiAgICBwcml2YXRlIHJlYWRvbmx5IGZzID0gX2ZzLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgZXhlY3V0ZVdpdGhEZWJ1Z0xvZ2dlciA9IF9leGVjdXRlV2l0aERlYnVnTG9nZ2VyXG4gICkge31cblxuICAvKipcbiAgICogQ29waWVzIHRoZSB0ZW1wbGF0ZSBkaXJlY3RvcnkgdG8gYW4gYW1wbGlmeSBmb2xkZXIgd2l0aGluIHRoZSBwcm9qZWN0Um9vdFxuICAgKi9cbiAgZ2VuZXJhdGVJbml0aWFsUHJvamVjdEZpbGVzID0gYXN5bmMgKCk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgIGNvbnN0IHRhcmdldERpciA9IHBhdGgucmVzb2x2ZSh0aGlzLnByb2plY3RSb290LCAnYW1wbGlmeScpO1xuICAgIGF3YWl0IHRoaXMuZnMubWtkaXIodGFyZ2V0RGlyLCB7IHJlY3Vyc2l2ZTogdHJ1ZSB9KTtcbiAgICBhd2FpdCB0aGlzLmZzLmNwKFxuICAgICAgbmV3IFVSTCgnLi4vdGVtcGxhdGVzL2Jhc2ljLWF1dGgtZGF0YS9hbXBsaWZ5JywgaW1wb3J0Lm1ldGEudXJsKSxcbiAgICAgIHRhcmdldERpcixcbiAgICAgIHsgcmVjdXJzaXZlOiB0cnVlIH1cbiAgICApO1xuXG4gICAgY29uc3QgcGFja2FnZUpzb25Db250ZW50ID0geyB0eXBlOiAnbW9kdWxlJyB9O1xuICAgIGF3YWl0IHRoaXMuZnMud3JpdGVGaWxlKFxuICAgICAgcGF0aC5yZXNvbHZlKHRhcmdldERpciwgJ3BhY2thZ2UuanNvbicpLFxuICAgICAgSlNPTi5zdHJpbmdpZnkocGFja2FnZUpzb25Db250ZW50LCBudWxsLCAyKVxuICAgICk7XG5cbiAgICBhd2FpdCB0aGlzLmluaXRpYWxpemVUc0NvbmZpZyh0YXJnZXREaXIpO1xuICB9O1xuXG4gIHByaXZhdGUgaW5pdGlhbGl6ZVRzQ29uZmlnID0gYXN5bmMgKHRhcmdldERpcjogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgY29uc3QgdHNjQXJncyA9IFtcbiAgICAgICd0c2MnLFxuICAgICAgJy0taW5pdCcsXG4gICAgICAnLS1yZXNvbHZlSnNvbk1vZHVsZScsXG4gICAgICAndHJ1ZScsXG4gICAgICAnLS1tb2R1bGUnLFxuICAgICAgJ2VzMjAyMicsXG4gICAgICAnLS1tb2R1bGVSZXNvbHV0aW9uJyxcbiAgICAgICdidW5kbGVyJyxcbiAgICAgICctLXRhcmdldCcsXG4gICAgICAnZXMyMDIyJyxcbiAgICBdO1xuXG4gICAgYXdhaXQgdGhpcy5leGVjdXRlV2l0aERlYnVnTG9nZ2VyKHRhcmdldERpciwgJ25weCcsIHRzY0FyZ3MsIGV4ZWNhKTtcbiAgfTtcbn1cbiJdfQ==